## (0) Testing: True: Normal-Normal; Assumption: varying
## simulate data
set.seed(617)
N <- 10000                  # observations
rho <- 0.2                  # error correlation
sigma <- 1                  # error std (outcome stage)
delta0 <- -1                # selectivity
delta1 <- -1                #
Theta <- c(0,1,1,delta0,delta1,1)   # coefficients
Loop <- 100                 # repeated drawings
## (1) True: Normal-Normal; Assumption: varying
## varying factors
set.seed(617)
sigma <- 1                  # error std (outcome stage)
Loop <- 2                 # repeated drawings
raw_df <- data.frame()
# observations
for (N in c(300, 500, 1000, 2000, 5000, 10000)) {
# selectivity
for (delta0 in c(-1,0,1)) {
for (delta1 in c(-3,-2,-1)) {
Theta <- c(0,1,1,delta0,delta1,1)
# error correlation
for (rho in seq(-0.9,0.9,by=0.1)) {
# multiple simulations
for (iter in 1:Loop) {
tmp <- c()
tmp <- compareModels(N, Theta, rho, sigma)
raw_df <- rbind(raw_df, tmp)
}
}
}
}
}
## compare bias
exploreBiasFactors <- function(df) {
f_compare <- 'bias~selectivity+rho+N'
res <- c()
for (mod in levels(df$mod)) {
## fit
lmod_b0 <- lm(f_compare, data=df[which((df$term=='beta0')&(df$mod==mod)),])
lmod_b1 <- lm(f_compare, data=df[which((df$term=='beta1')&(df$mod==mod)),])
lmod_b2 <- lm(f_compare, data=df[which((df$term=='beta2')&(df$mod==mod)),])
## generate table
tmp <- rbind(mod, cbind(coef2colvec(coef(summary(lmod_b0)), "beta0"),
coef2colvec(coef(summary(lmod_b1)), "beta1"),
coef2colvec(coef(summary(lmod_b2)), "beta2")))
res <- cbind(res, tmp)
}
return(res)
}
truevals <- c(Theta[1:3], # OLS
Theta[4:6], Theta[1:3], NA, sigma, rho, # IMR
# Theta[4:6], Theta[1:3], sigma, rho, # MLE
Theta[4:6], Theta[1:3], NA, # IMR wrong SE
Theta[4:6], Theta[1:3], NA) # wrong IMR logit
correctterms <- c('beta0','beta1','beta2',
'delta0','delta1','delta2','beta0','beta1','beta2','IMR','sigma','rho',
# 'delta0','delta1','delta2','beta0','beta1','beta2','sigma','rho',
'delta0','delta1','delta2','beta0','beta1','beta2','IMR',
'delta0','delta1','delta2','beta0','beta1','beta2','IMR')
raw_df$bias <- raw_df$estimate - rep(truevals, dim(raw_df)[1]/length(truevals))
raw_df$term <- rep(as.factor(correctterms), dim(raw_df)[1]/length(truevals))
raw_df$mod <- as.factor(raw_df$mod)
head(raw_df)
# save
biasfactor <- exploreBiasFactors(raw_df)
biasfactor
write.xlsx(biasfactor, paste0(workpath,"bias_factors.xlsx"), sheetName="regression")
# wr
biasfactor
biasfactor[,'beta1']
biasfactor[,c('beta1')]
biasfactor[,c('beta1','beta1')]
biasfactor[,c('beta1','beta1','beta1')]
biasfactor[,c(2,4,6,8)]
biasfactor[,c(2,5,8,11)]
## compare bias
exploreBiasFactors <- function(df) {
f_compare <- 'bias~delta0+delta1+rho+N'
res <- c()
for (mod in levels(df$mod)) {
## fit
lmod_b0 <- lm(f_compare, data=df[which((df$term=='beta0')&(df$mod==mod)),])
lmod_b1 <- lm(f_compare, data=df[which((df$term=='beta1')&(df$mod==mod)),])
lmod_b2 <- lm(f_compare, data=df[which((df$term=='beta2')&(df$mod==mod)),])
## generate table
tmp <- rbind(mod, cbind(coef2colvec(coef(summary(lmod_b0)), "beta0"),
coef2colvec(coef(summary(lmod_b1)), "beta1"),
coef2colvec(coef(summary(lmod_b2)), "beta2")))
res <- cbind(res, tmp)
}
return(res)
}
biasfactor <- exploreBiasFactors(raw_df)
biasfactor
biasfactor[,c(2,5,8,11)]
## compare bias
exploreBiasFactors <- function(df) {
f_compare <- 'bias~(delta0+delta1+rho+N)^2'
res <- c()
for (mod in levels(df$mod)) {
## fit
lmod_b0 <- lm(f_compare, data=df[which((df$term=='beta0')&(df$mod==mod)),])
lmod_b1 <- lm(f_compare, data=df[which((df$term=='beta1')&(df$mod==mod)),])
lmod_b2 <- lm(f_compare, data=df[which((df$term=='beta2')&(df$mod==mod)),])
## generate table
tmp <- rbind(mod, cbind(coef2colvec(coef(summary(lmod_b0)), "beta0"),
coef2colvec(coef(summary(lmod_b1)), "beta1"),
coef2colvec(coef(summary(lmod_b2)), "beta2")))
res <- cbind(res, tmp)
}
return(res)
}
biasfactor <- exploreBiasFactors(raw_df)
biasfactor
biasfactor[,c(2,5,8,11)]
seq(-1,1,by=0.4)
seq(-1,1,by=0.3)
seq(-1,1,by=0.2)
seq(-1,1,by=0.25)
set.seed(617)
sigma <- 1                  # error std (outcome stage)
Loop <- 2                 # repeated drawings
raw_df <- data.frame()
# observations
for (N in c(200, 300, 500, 1000, 2000, 5000, 10000)) {
# selectivity - exogenous
for (delta0 in seq(-1,1,by=0.25)) {
# selectivity - endogenous
for (delta1 in seq(-3,3,by=1)) {
Theta <- c(0,1,1,delta0,delta1,1)
# error correlation
for (rho in seq(-0.9,0.9,by=0.1)) {
# multiple simulations
for (iter in 1:Loop) {
tmp <- c()
tmp <- compareModels(N, Theta, rho, sigma)
raw_df <- rbind(raw_df, tmp)
}
}
}
}
}
raw_df
N
rho
truevals <- c(Theta[1:3], # OLS
Theta[4:6], Theta[1:3], NA, sigma, rho, # IMR
# Theta[4:6], Theta[1:3], sigma, rho, # MLE
Theta[4:6], Theta[1:3], NA, # IMR wrong SE
Theta[4:6], Theta[1:3], NA) # wrong IMR logit
correctterms <- c('beta0','beta1','beta2',
'delta0','delta1','delta2','beta0','beta1','beta2','IMR','sigma','rho',
# 'delta0','delta1','delta2','beta0','beta1','beta2','sigma','rho',
'delta0','delta1','delta2','beta0','beta1','beta2','IMR',
'delta0','delta1','delta2','beta0','beta1','beta2','IMR')
raw_df$bias <- raw_df$estimate - rep(truevals, dim(raw_df)[1]/length(truevals))
raw_df$term <- rep(as.factor(correctterms), dim(raw_df)[1]/length(truevals))
raw_df$mod <- as.factor(raw_df$mod)
head(raw_df)
# save
biasfactor <- exploreBiasFactors(raw_df)
biasfactor[,c(2,5,8,11)]
# compare bias
exploreBiasFactors <- function(df) {
f_main <- 'bias~delta0+delta1+rho+N'
f_inter <- 'bias~(delta0+delta1+rho+N)^2'
res <- c()
for (mod in levels(df$mod)) {
## fit
lmod_b0 <- lm(f_main, data=df[which((df$term=='beta0')&(df$mod==mod)),])
lmod_b1 <- lm(f_main, data=df[which((df$term=='beta1')&(df$mod==mod)),])
lmod_b2 <- lm(f_main, data=df[which((df$term=='beta2')&(df$mod==mod)),])
## generate table
tmp <- rbind(mod, cbind(coef2colvec(coef(summary(lmod_b0)), "beta0"),
coef2colvec(coef(summary(lmod_b1)), "beta1"),
coef2colvec(coef(summary(lmod_b2)), "beta2")))
res <- cbind(res, tmp)
}
return(res)
}
biasfactor <- exploreBiasFactors(raw_df)
biasfactor[,c(2,5,8,11)]
exploreBiasFactors <- function(df) {
f_main <- 'bias~delta0+delta1+rho+N'
f_inter <- 'bias~(delta0+delta1+rho+N)^2'
res <- c()
for (mod in levels(df$mod)) {
## fit
lmod_b0 <- lm(f_inter, data=df[which((df$term=='beta0')&(df$mod==mod)),])
lmod_b1 <- lm(f_inter, data=df[which((df$term=='beta1')&(df$mod==mod)),])
lmod_b2 <- lm(f_inter, data=df[which((df$term=='beta2')&(df$mod==mod)),])
## generate table
tmp <- rbind(mod, cbind(coef2colvec(coef(summary(lmod_b0)), "beta0"),
coef2colvec(coef(summary(lmod_b1)), "beta1"),
coef2colvec(coef(summary(lmod_b2)), "beta2")))
res <- cbind(res, tmp)
}
return(res)
}
biasfactor <- exploreBiasFactors(raw_df)
biasfactor[,c(2,5,8,11)]
seq(-0.9,0.9,by=0.1)
seq(-0.9,0.9,by=0.2)
seq(-0.9,0.9,by=0.25)
seq(-0.9,0.9,by=0.3)
seq(-0.9,0.9,by=0.3)
## varying factors
set.seed(617)
sigma <- 1                  # error std (outcome stage)
Loop <- 1                   # repeated drawings
raw_df <- data.frame()
# observations
for (N in c(200, 300, 500, 1000, 5000)) {
# selectivity - exogenous
for (delta0 in seq(-1,1,by=0.25)) {
# selectivity - endogenous
for (delta1 in seq(-3,3,by=1)) {
Theta <- c(0,1,1,delta0,delta1,1)
# error correlation
for (rho in seq(-0.9,0.9,by=0.3)) {
# multiple simulations
for (iter in 1:Loop) {
tmp <- c()
tmp <- compareModels(N, Theta, rho, sigma)
raw_df <- rbind(raw_df, tmp)
}
}
}
}
}
time(for (iter in 1:Loop) {
tmp <- c()
tmp <- compareModels(N, Theta, rho, sigma)
raw_df <- rbind(raw_df, tmp)
})
time(for (iter in 1:Loop) {
tmp <- c()
tmp <- compareModels(N, Theta, rho, sigma)
raw_df <- rbind(raw_df, tmp)
})
source("~/Documents/3_Academics/Projects/8_SelectionBias/simulation/simulation_utils.R")
rm(list = ls())
library(MASS)
library(tidyverse)
library(tibble)
library(mvtnorm)
library(sampleSelection)
library(broom)
library(xlsx)
library(ggplot2)
library(gridExtra)
source("/Users/xindieh/Documents/3_Academics/Projects/8_SelectionBias/simulation/simulation_utils.R")
workpath = "/Users/xindieh/Documents/3_Academics/Projects/8_SelectionBias/simulation/"
## (1) True: Normal-Normal; Assumption: varying
## varying factors
set.seed(617)
sigma <- 1                  # error std (outcome stage)
Loop <- 1                   # repeated drawings
raw_df <- data.frame()
# observations
for (N in c(200, 300, 500, 1000, 5000)) {
# selectivity - exogenous
for (delta0 in seq(-1,1,by=0.25)) {
# selectivity - endogenous
for (delta1 in seq(-3,3,by=1)) {
Theta <- c(0,1,1,delta0,delta1,1)
# error correlation
for (rho in seq(-0.9,0.9,by=0.3)) {
# multiple simulations
for (iter in 1:Loop) {
tmp <- c()
tmp <- compareModels(N, Theta, rho, sigma)
raw_df <- rbind(raw_df, tmp)
}
}
}
}
}
# cleaning
truevals <- c(Theta[1:3], # OLS
Theta[4:6], Theta[1:3], NA, sigma, rho, # IMR
# Theta[4:6], Theta[1:3], sigma, rho, # MLE
Theta[4:6], Theta[1:3], NA, # IMR wrong SE
Theta[4:6], Theta[1:3], NA) # wrong IMR logit
correctterms <- c('beta0','beta1','beta2',
'delta0','delta1','delta2','beta0','beta1','beta2','IMR','sigma','rho',
# 'delta0','delta1','delta2','beta0','beta1','beta2','sigma','rho',
'delta0','delta1','delta2','beta0','beta1','beta2','IMR',
'delta0','delta1','delta2','beta0','beta1','beta2','IMR')
raw_df$bias <- raw_df$estimate - rep(truevals, dim(raw_df)[1]/length(truevals))
raw_df$term <- rep(as.factor(correctterms), dim(raw_df)[1]/length(truevals))
raw_df$mod <- as.factor(raw_df$mod)
head(raw_df)
# save
biasfactor <- exploreBiasFactors(raw_df)
biasfactor[,c(2,5,8,11)]
rm(list = ls())
library(MASS)
library(tidyverse)
library(tibble)
library(mvtnorm)
library(sampleSelection)
library(copula)
library(broom)
library(xlsx)
library(ggplot2)
library(gridExtra)
workpath = "/Users/xindieh/Documents/3_Academics/Projects/8_SelectionBias/simulation/"
source(paste0(workpath,"simulation_utils.R"))
## (1) True: Normal-Normal; Assumption: varying
## varying factors
set.seed(617)
sigma <- 1                  # error std (outcome stage)
Loop <- 1000                 # repeated drawings
Loop <- 10
N <-N <- 1000
delta0 <- -2
delta1 <- -1
Theta <- c(0,1,1,delta0,delta1,1)
rho <- -0.9
df <- generateNNSamples(N, Theta, rho, sigma)
set.seed(617)
sigma <- 1                  # error std (outcome stage)
Loop <- 1000                 # repeated drawings
N <- 1000
delta0 <- -2
delta1 <- -1
Theta <- c(0,1,1,delta0,delta1,1)
rho <- -0.9
df <- generateNNSamples(N, Theta, rho, sigma)
df
setwd("/Users/xindieh/Documents/3_Academics/Projects/8_SelectionBias/package/R/cplselection")
build()
library(devtools)
setwd(
"/Users/xindieh/Documents/10_GitRepo/cplselection"
)
library(roxygen2)
document()
document()
document()
document()
check()
build()
document()
document()
usethis::use_readme_rmd()
u1 <- rnorm(nobs)
?cplselectionMCMC
# perform MCMC draws
draws <- cplselectionMCMC(
outcome_formula = YO~X1, select_formula = YS~X1+X2,
outcome_dist = "Poisson", select_dist = "Logit",
data = data, loop = 5000)
nobs <- 300
dependence <- 0.5
betaO0 <- 1
betaO1 <- 1
betaS0 <- 0
betaS1 <- 1
betaS2 <- 1
uo <- rnorm(nobs)
us <- dependence*uo + dependence*rnorm(nobs)
data <- data.frame(
id = 1:nobs,
X1 = rnorm(nobs),
X2 = rnorm(nobs),
YO = qpois(p=uo, lambda=exp(betaO0 + betaO1*X1)),
YS = qbinom(p=us, prob=1/(1+exp(-(betaS0 + betaS1*X1 + betaS2*X2)), size=1)
data <- data.frame(
id = 1:nobs,
X1 = rnorm(nobs),
X2 = rnorm(nobs),
YO = qpois(p=uo, lambda=exp(betaO0 + betaO1*X1)),
YS = qbinom(p=us, prob=1/(1+exp(-(betaS0 + betaS1*X1 + betaS2*X2))), size=1)
)
us <- dependence*uo + dependence*rnorm(nobs)
data <- data.frame(X1 = rnorm(nobs), X2 = rnorm(nobs))
data$YO <- qpois(p=uo, lambda=exp(betaO0 + betaO1*X1)),
data$YO <- qpois(p=uo, lambda=exp(betaO0 + betaO1*X1))
data$YO <- qpois(p=uo, lambda=exp(betaO0 + betaO1*data$X1))
nobs <- 300
dependence <- 0.5
betaO0 <- 1
betaO1 <- 1
betaS0 <- 0
betaS1 <- 1
betaS2 <- 1
uo <- rnorm(nobs)
us <- dependence*uo + dependence*rnorm(nobs)
data <- data.frame(X1 = rnorm(nobs), X2 = rnorm(nobs))
data$YO <- qpois(p=uo, lambda=exp(betaO0 + betaO1*data$X1))
data$YS <- qbinom(p=us, prob=1/(1+exp(-(betaS0 + betaS1*data$X1 + betaS2*data$X2))), size=1)
data$YO[YS==0] <- NA
uo <- runif(nobs)
us <- pnorm(dependence*qnorm(uo) + dependence*rnorm(nobs))
data <- data.frame(X1 = rnorm(nobs), X2 = rnorm(nobs))
data$YO <- qpois(p=uo, lambda=exp(betaO0 + betaO1*data$X1))
data$YS <- qbinom(p=us, prob=1/(1+exp(-(betaS0 + betaS1*data$X1 + betaS2*data$X2))), size=1)
data$YO[YS==0] <- NA
data$YO[data$YS==0] <- NA
# perform MCMC draws
draws <- cplselectionMCMC(
outcome_formula = YO~X1, select_formula = YS~X1+X2,
outcome_dist = "Poisson", select_dist = "Logit",
data = data, loop = 5000)
length(draws)
document()
?cplselectionMCMC
# if true value is not known
result.1 <- cplselectionInfer(iterates=draws, burnin=2500)
print(result.1)
# if true value is known
trueval <- c(betaO0, betaO1, betaS0, betaS1, betaS2)
result.2 <- cplselectionInfer(iterates=draws, burnin=2500, trueval=trueval)
trueval
# Example data : Poisson outcome variable YO, logit selection process YS
nobs <- 300
dependence <- 0.5
betaO0 <- 1
betaO1 <- 1
betaO2 <- 0
betaS0 <- 0
betaS1 <- 1
betaS2 <- 1
uo <- runif(nobs)
us <- pnorm(dependence*qnorm(uo) + dependence*rnorm(nobs))
data <- data.frame(X1 = rnorm(nobs), X2 = rnorm(nobs))
data$YO <- qpois(p=uo, lambda=exp(betaO0 + betaO1*data$X1 + betaO2*data$X2))
data$YS <- qbinom(p=us, prob=1/(1+exp(-(betaS0 + betaS1*data$X1 + betaS2*data$X2))), size=1)
data$YO[data$YS==0] <- NA
# perform MCMC draws
draws <- cplselectionMCMC(
outcome_formula = YO~X1, select_formula = YS~X1+X2,
outcome_dist = "Poisson", select_dist = "Logit",
data = data, loop = 5000)
# if true value is not known
result.1 <- cplselectionInfer(iterates=draws, burnin=2500)
print(result.1)
cplselectionInfer(iterates=draws, burnin=2500)
betaO1*data$X1
cplselectionInfer(iterates=draws, burnin=2500)
# if true value is known
trueval <- c(betaO0, betaO1, betaO2, betaS0, betaS1, betaS2)
result.2 <- cplselectionInfer(iterates=draws, burnin=2500, trueval=trueval)
print(result.2)
# if true value is known
trueval <- c(dependence, betaO0, betaO1, betaO2, betaS0, betaS1, betaS2)
result.2 <- cplselectionInfer(iterates=draws, burnin=2500, trueval=trueval)
print(result.2)
# if true value is known
trueval <- c(dependence, betaO0, betaO1, betaS0, betaS1, betaS2)
result.2 <- cplselectionInfer(iterates=draws, burnin=2500, trueval=trueval)
print(result.2)
# Example data : Poisson outcome variable YO, logit selection process YS
nobs <- 300
dependence <- 0.5
betaO0 <- 1
betaO1 <- 1
betaS0 <- 0
betaS1 <- 1
betaS2 <- 1
uo <- runif(nobs)
us <- pnorm(dependence*qnorm(uo) + dependence*rnorm(nobs))
data <- data.frame(X1 = rnorm(nobs), X2 = rnorm(nobs))
data$YO <- qpois(p=uo, lambda=exp(betaO0 + betaO1*data$X1)
data$YS <- qbinom(p=us, prob=1/(1+exp(-(betaS0 + betaS1*data$X1 + betaS2*data$X2))), size=1)
data$YO <- qpois(p=uo, lambda=exp(betaO0 + betaO1*data$X1))
data$YS <- qbinom(p=us, prob=1/(1+exp(-(betaS0 + betaS1*data$X1 + betaS2*data$X2))), size=1)
data$YO[data$YS==0] <- NA
# perform MCMC draws
draws <- cplselectionMCMC(
outcome_formula = YO~X1, select_formula = YS~X1+X2,
outcome_dist = "Poisson", select_dist = "Logit",
data = data, loop = 5000)
# if the true value is known
trueval <- c(dependence, betaO0, betaO1, betaS0, betaS1, betaS2)
result.2 <- cplselectionInfer(iterates=draws, burnin=2500, trueval=trueval)
print(result.2)
print(round(result.1, 2))
# if the true values are known
trueval <- c(dependence, betaO0, betaO1, betaS0, betaS1, betaS2)
result.2 <- cplselectionInfer(iterates=draws, burnin=2500, trueval=trueval)
print(round(result.2, 2))
# perform MCMC draws
loop <- 10000
draws <- cplselectionMCMC(
outcome_formula = YO~X1, select_formula = YS~X1+X2,
outcome_dist = "Poisson", select_dist = "Logit",
data = data, loop = loop)
# if the true values are not known
result.1 <- cplselectionInfer(iterates=draws, burnin=loop/2)
print(round(result.1, 2))
# if the true values are known
trueval <- c(dependence, betaO0, betaO1, betaS0, betaS1, betaS2)
result.2 <- cplselectionInfer(iterates=draws, burnin=loop/2, trueval=trueval)
print(round(result.2, 2))
document()
build_readme()
rmarkdown::render("README.Rmd", output_format = "md_document")
summary(data)
rmarkdown::render("README.Rmd", output_format = "md_document")
rmarkdown::render("README.Rmd", output_format = "md_document")
Sys.Date()
?cplselectionMCMC
data
save(data, file="./data/")
save(data, file="/data")
save(data, file=getwd()+"/data")
getwd()
